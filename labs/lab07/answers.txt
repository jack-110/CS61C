Exercise 1
	Scenario 1
		1.Because block size in bytes is exactly equal to step size in bytes. 
		2.The hit rate still 0, because we repeate the same array access pattern every time.
		3.Change stepsize to 1.

	Scenario 2
		1.64, because array[index] = array[index] + 1 has two memory access.
		2.Miss Hit Hit Hit, because array[index] Miss, array[index] Hit, array[index+1] Hit, array[index+1] Hit for each block.
		3.0.75
		4.hit rate ~ 1, because the whole memory cached after first iteration.
		5.hit rate high, because the cache size is high.

	Scenario 3
		1.hit rate L1=0.5, L2=0, overall=1/3.
		2.L1 32 access, 16 miss.
		3.L1 16 access, we access L2 cache when L1 cache miss.
		4.we can increase rep counts, as we have cached all data in L2 after first rep.
		5.# blocks doesn't affect hit rate, but block size will increase hit rate.

Exercise 2
	ijk:B with stride 1, A with stride n, C with stride 0.
	ikj:B with stride n, A with stride 0, C with stride n.
	jik:B with stride 1, A with stride n, C with stride 0.
	jki:B with stride 0, A with stride 1, C with stride 1.
	kij:B with stride n, A with stride 0, C with stride n.
	kji:B with stride 0, A with stride 1, C with stride 1.

	1.jki implementation is fast, because it access both arrayA and arrayB by rows that fully make use of spatial and temporal locality.
	2.ikj implementation is slowest, because it access by cols.
	3.with a fixed siez block, the stride value decides wheather we can make use of cache data!
If the stride is too large, the next data that we want will be located at another block memory.

Exercise 3
	Part 1
		blocksize = 20, n = 100: naive 0.013 milliseconds, blocking 0.015.
		blocksize = 20, n = 1000: naive 1.156 milliseconds, blocking 0.984.
		blocksize = 20, n = 2000: naive 25.279 milliseconds, blocking 6.314.
		blocksize = 20, n = 5000: naive 282.273 milliseconds, blocking 36.449.
		blocksize = 20, n = 10000: naive 1491.83 milliseconds, blocking 168.44.

		1.1000.
		2.If the matrix size is too samll, it's whole data can be cached. So block doesn't offer any help, and it cost some extra time such as compute the blocks etc.

	Part 2
		blocksize = 50, n = 10000: naive 1458.72 milliseconds, blocking 141.995.
		blocksize = 100, n = 10000:naive 1498.03 milliseconds, blocking 126.14.
		blocksize = 500, n = 10000:naive 1520.05 milliseconds, blocking 126.959.
		blocksize = 1000, n = 10000:naive 1458.82 milliseconds, blocking 211.557.
		blocksize = 5000, n = 10000:naive 1483.65 milliseconds, blocking 1497.73.

		1.time decrease first, and then increase. The cache size is limited, and it's betterto not oversie cache.
